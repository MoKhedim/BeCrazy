{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Text } from \"../../components/Themed\";\nimport { Button } from \"../../components/auth/Button\";\nimport { TextInput } from \"../../components/auth/TextInput\";\nimport Logo from \"../../components/Logo\";\nimport { emailValidator } from \"../../helpers/emailValidator\";\nimport { passwordValidator } from \"../../helpers/passwordValidator\";\nimport { passwordConfirmValidator } from \"../../helpers/passwordConfirmValidator\";\nimport { MyContext } from \"../../App\";\nimport styles from \"../../components/auth/StyleSheetForm\";\nimport { server } from \"../../constants/Server\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState({\n      value: '',\n      error: ''\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState({\n      value: '',\n      error: ''\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    email = _useState4[0],\n    setEmail = _useState4[1];\n  var _useState5 = useState({\n      value: '',\n      error: ''\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    password = _useState6[0],\n    setPassword = _useState6[1];\n  var _useState7 = useState({\n      value: '',\n      error: ''\n    }),\n    _useState8 = _slicedToArray(_useState7, 2),\n    passwordConfirm = _useState8[0],\n    setPasswordConfirm = _useState8[1];\n  var _useContext = useContext(MyContext),\n    setToken = _useContext.setToken;\n  var onRegisterPressed = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var emailError = emailValidator(email.value);\n      var passwordError = passwordValidator(password.value);\n      var passwordConfirmError = passwordConfirmValidator(password.value, passwordConfirm.value);\n      if (emailError || passwordError || passwordConfirmError) {\n        setEmail(_objectSpread(_objectSpread({}, email), {}, {\n          error: emailError\n        }));\n        setPassword(_objectSpread(_objectSpread({}, password), {}, {\n          error: passwordError\n        }));\n        setPasswordConfirm(_objectSpread(_objectSpread({}, passwordConfirm), {}, {\n          error: passwordConfirmError\n        }));\n        return;\n      }\n      var res = yield fetch(server + \"/signup\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: username.value,\n          email: email.value,\n          password: password.value\n        })\n      });\n      if (res.status === 200) {\n        navigation.replace('LoginScreen');\n      } else {\n        alert(res.status);\n      }\n    });\n    return function onRegisterPressed() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Logo, {}), _jsx(Text, {\n      style: styles.title,\n      children: \"Register\"\n    }), _jsx(TextInput, {\n      returnKeyType: \"next\",\n      placeholder: \"Username\",\n      value: username.value,\n      onChangeText: function onChangeText(text) {\n        return setUsername({\n          value: text,\n          error: ''\n        });\n      },\n      autoCapitalize: \"none\"\n    }), _jsx(TextInput, {\n      returnKeyType: \"next\",\n      placeholder: \"Email\",\n      value: email.value,\n      onChangeText: function onChangeText(text) {\n        return setEmail({\n          value: text,\n          error: ''\n        });\n      },\n      autoCapitalize: \"none\",\n      textContentType: \"emailAddress\",\n      keyboardType: \"email-address\"\n    }), _jsx(TextInput, {\n      returnKeyType: \"next\",\n      placeholder: \"Password\",\n      value: password.value,\n      onChangeText: function onChangeText(text) {\n        return setPassword({\n          value: text,\n          error: ''\n        });\n      },\n      secureTextEntry: true\n    }), _jsx(TextInput, {\n      returnKeyType: \"done\",\n      placeholder: \"Confirm Password\",\n      value: passwordConfirm.value,\n      onChangeText: function onChangeText(text) {\n        return setPasswordConfirm({\n          value: text,\n          error: ''\n        });\n      },\n      secureTextEntry: true\n    }), _jsx(Text, {\n      style: styles.error,\n      children: email.error || password.error || passwordConfirm.error\n    }), _jsx(Button, {\n      onPress: onRegisterPressed,\n      children: \"Register\"\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        children: \"Already have an account? \"\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.replace('LoginScreen');\n        },\n        children: _jsx(Text, {\n          style: styles.link,\n          children: \"Login\"\n        })\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["useState","useContext","View","TouchableOpacity","Text","Button","TextInput","Logo","emailValidator","passwordValidator","passwordConfirmValidator","MyContext","styles","server","jsx","_jsx","jsxs","_jsxs","RegisterScreen","_ref","navigation","_useState","value","error","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","_useState7","_useState8","passwordConfirm","setPasswordConfirm","_useContext","setToken","onRegisterPressed","_ref2","_asyncToGenerator","emailError","passwordError","passwordConfirmError","_objectSpread","res","fetch","method","headers","body","JSON","stringify","status","replace","alert","apply","arguments","style","container","children","title","returnKeyType","placeholder","onChangeText","text","autoCapitalize","textContentType","keyboardType","secureTextEntry","onPress","row","link"],"sources":["/Users/mohammedkhedim/Gitclones/BeCrazy/becrazy/screens/auth/Register.tsx"],"sourcesContent":["import { useState, useContext } from 'react'\nimport { View, TouchableOpacity } from 'react-native'\nimport { Text } from '../../components/Themed'\nimport { Button } from '../../components/auth/Button'\nimport { TextInput } from '../../components/auth/TextInput'\nimport Logo from '../../components/Logo'\nimport { emailValidator } from '../../helpers/emailValidator'\nimport { passwordValidator } from '../../helpers/passwordValidator'\nimport { passwordConfirmValidator } from '../../helpers/passwordConfirmValidator'\nimport { MyContext } from '../../App'\nimport { RootStackScreenProps } from '../../types'\nimport styles from '../../components/auth/StyleSheetForm'\nimport RegisterUser from '../../interfaces/auth/RegisterUser'\nimport { server } from '../../constants/Server'\n\n\nexport default function RegisterScreen({ navigation }: RootStackScreenProps<'RegisterScreen'>) {\n    // set the initial state of the form\n    const [username, setUsername] = useState({ value: '', error: '' })\n    const [email, setEmail] = useState({ value: '', error: '' })\n    const [password, setPassword] = useState({ value: '', error: '' })\n    const [passwordConfirm, setPasswordConfirm] = useState({ value: '', error: '' })\n    const { setToken } = useContext(MyContext);\n\n\n    // create a function to handle the register button press\n    // it will validate the email and password and then register the user if there are no errors\n    // then navigate to the home page\n    const onRegisterPressed = async () => {\n        const emailError = emailValidator(email.value)\n        const passwordError = passwordValidator(password.value)\n        const passwordConfirmError = passwordConfirmValidator(password.value, passwordConfirm.value)\n        if (emailError || passwordError || passwordConfirmError) {\n            setEmail({ ...email, error: emailError })\n            setPassword({ ...password, error: passwordError })\n            setPasswordConfirm({ ...passwordConfirm, error: passwordConfirmError })\n            return\n        }\n        const res = await fetch(`${server}/signup`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username: username.value,\n                email: email.value,\n                password: password.value\n            } as RegisterUser)\n        })\n        if (res.status === 200) {\n            navigation.replace('LoginScreen')\n        } else {\n            alert(res.status)\n        }\n    }\n\n    return (\n        <View style={styles.container}>\n            <Logo />\n            <Text style={styles.title}>Register</Text>\n            <TextInput\n                returnKeyType=\"next\"\n                placeholder='Username'\n                value={username.value}\n                onChangeText={(text: string) => setUsername({ value: text, error: '' })}\n                autoCapitalize=\"none\"\n            />\n            <TextInput\n                returnKeyType=\"next\"\n                placeholder='Email'\n                value={email.value}\n                onChangeText={(text: string) => setEmail({ value: text, error: '' })}\n                autoCapitalize=\"none\"\n                textContentType=\"emailAddress\"\n                keyboardType=\"email-address\"\n            />\n            <TextInput\n                returnKeyType=\"next\"\n                placeholder='Password'\n                value={password.value}\n                onChangeText={(text: string) => setPassword({ value: text, error: '' })}\n                secureTextEntry\n            />\n            <TextInput\n                returnKeyType=\"done\"\n                placeholder='Confirm Password'\n                value={passwordConfirm.value}\n                onChangeText={(text: string) => setPasswordConfirm({ value: text, error: '' })}\n                secureTextEntry\n            />\n            <Text style={styles.error}>{email.error || password.error || passwordConfirm.error}</Text>\n            <Button onPress={onRegisterPressed}>\n                Register\n            </Button>\n            <View style={styles.row}>\n                <Text>Already have an account? </Text>\n                <TouchableOpacity\n                    onPress={() => navigation.replace('LoginScreen')}\n                >\n                    <Text style={styles.link}>Login</Text>\n                </TouchableOpacity>\n            </View>\n        </View>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}