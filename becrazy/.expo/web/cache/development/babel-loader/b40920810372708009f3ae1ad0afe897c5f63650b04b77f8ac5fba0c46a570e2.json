{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useContext, useState } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text } from \"../../components/Themed\";\nimport { Button } from \"../../components/auth/Button\";\nimport { TextInput } from \"../../components/auth/TextInput\";\nimport Logo from \"../../components/Logo\";\nimport { emailValidator } from \"../../helpers/emailValidator\";\nimport { passwordValidator } from \"../../helpers/passwordValidator\";\nimport { MyContext } from \"../../App\";\nimport styles from \"../../components/auth/StyleSheetForm\";\nimport { server } from \"../../constants/Server\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState({\n      value: '',\n      error: ''\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState({\n      value: '',\n      error: ''\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useContext = useContext(MyContext),\n    token = _useContext.token,\n    setToken = _useContext.setToken;\n  if (token) navigation.replace('Root');\n  var onLoginPressed = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var emailError = emailValidator(email.value);\n      var passwordError = passwordValidator(password.value);\n      if (emailError || passwordError) {\n        setEmail(_objectSpread(_objectSpread({}, email), {}, {\n          error: emailError\n        }));\n        setPassword(_objectSpread(_objectSpread({}, password), {}, {\n          error: passwordError\n        }));\n        return;\n      }\n      var res = yield fetch(server + \"/login\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email.value,\n          password: password.value\n        })\n      });\n      if (res.status === 200) {\n        var data = yield res.json();\n        setToken(data.token);\n        navigation.replace('Root');\n      } else {\n        alert(res.status);\n      }\n    });\n    return function onLoginPressed() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Logo, {}), _jsx(Text, {\n      style: styles.title,\n      children: \"Login\"\n    }), _jsx(TextInput, {\n      returnKeyType: \"next\",\n      placeholder: \"Email\",\n      value: email.value,\n      onChangeText: function onChangeText(text) {\n        return setEmail({\n          value: text,\n          error: ''\n        });\n      },\n      autoCapitalize: \"none\",\n      textContentType: \"emailAddress\",\n      keyboardType: \"email-address\"\n    }), _jsx(TextInput, {\n      returnKeyType: \"done\",\n      placeholder: \"Password\",\n      value: password.value,\n      onChangeText: function onChangeText(text) {\n        return setPassword({\n          value: text,\n          error: ''\n        });\n      },\n      secureTextEntry: true\n    }), _jsx(Text, {\n      style: styles.error,\n      children: email.error || password.error\n    }), _jsx(View, {\n      style: styles.forgotPassword,\n      children: _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('ResetPasswordScreen');\n        },\n        children: _jsx(Text, {\n          style: styles.forgot,\n          children: \"Forgot your password?\"\n        })\n      })\n    }), _jsx(Button, {\n      onPress: onLoginPressed,\n      children: \"Login\"\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        children: \"Don't have an account? \"\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.replace('RegisterScreen');\n        },\n        children: _jsx(Text, {\n          style: styles.link,\n          children: \"Register\"\n        })\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["useContext","useState","TouchableOpacity","View","Text","Button","TextInput","Logo","emailValidator","passwordValidator","MyContext","styles","server","jsx","_jsx","jsxs","_jsxs","LoginScreen","_ref","navigation","_useState","value","error","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useContext","token","setToken","replace","onLoginPressed","_ref2","_asyncToGenerator","emailError","passwordError","_objectSpread","res","fetch","method","headers","body","JSON","stringify","status","data","json","alert","apply","arguments","style","container","children","title","returnKeyType","placeholder","onChangeText","text","autoCapitalize","textContentType","keyboardType","secureTextEntry","forgotPassword","onPress","navigate","forgot","row","link"],"sources":["/Users/mohammedkhedim/Gitclones/BeCrazy/becrazy/screens/auth/Login.tsx"],"sourcesContent":["import { useContext, useState } from 'react'\nimport { TouchableOpacity, StyleSheet, View, useColorScheme } from 'react-native'\nimport { Text } from '../../components/Themed'\nimport { Button } from '../../components/auth/Button'\nimport { TextInput } from '../../components/auth/TextInput'\nimport Logo from '../../components/Logo'\nimport { emailValidator } from '../../helpers/emailValidator'\nimport { passwordValidator } from '../../helpers/passwordValidator'\nimport { RootStackScreenProps } from '../../types'\nimport { MyContext } from '../../App'\nimport styles from '../../components/auth/StyleSheetForm'\nimport LoginUser from '../../interfaces/auth/LoginUser'\nimport { server } from '../../constants/Server'\n\nexport default function LoginScreen({ navigation }: RootStackScreenProps<'LoginScreen'>) {\n    // create state variables for email and password\n    const [email, setEmail] = useState({ value: '', error: '' })\n    const [password, setPassword] = useState({ value: '', error: '' })\n    const { token, setToken } = useContext(MyContext);\n    if (token) navigation.replace('Root')\n\n    // create a function to handle the login button press\n    // it will validate the email and password and then log the user in if there are no errors\n    // if there are errors, it will set the error state variables to display the error messages\n    const onLoginPressed = async () => {\n        const emailError = emailValidator(email.value)\n        const passwordError = passwordValidator(password.value)\n        if (emailError || passwordError) {\n            setEmail({ ...email, error: emailError })\n            setPassword({ ...password, error: passwordError })\n            return\n        }\n        const res = await fetch(`${server}/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                email: email.value,\n                password: password.value\n            } as LoginUser)\n        })\n        if (res.status === 200) {\n            const data = await res.json()\n            setToken(data.token)\n            navigation.replace('Root')\n        } else {\n            alert(res.status)\n        }\n    }\n\n    return (\n        <View style={styles.container}>\n            <Logo />\n            <Text style={styles.title}>Login</Text>\n            <TextInput\n                returnKeyType=\"next\"\n                placeholder='Email'\n                value={email.value}\n                onChangeText={(text: string) => setEmail({ value: text, error: '' })}\n                autoCapitalize=\"none\"\n                textContentType=\"emailAddress\"\n                keyboardType=\"email-address\"\n            />\n            <TextInput\n                returnKeyType=\"done\"\n                placeholder='Password'\n                value={password.value}\n                onChangeText={(text: string) => setPassword({ value: text, error: '' })}\n                secureTextEntry\n            />\n            {/**Show the error of either email or password */}\n            <Text style={styles.error}>{email.error || password.error}</Text>\n            <View style={styles.forgotPassword}>\n                <TouchableOpacity\n                    onPress={() => navigation.navigate('ResetPasswordScreen')}\n                >\n                    <Text style={styles.forgot}>Forgot your password?</Text>\n                </TouchableOpacity>\n            </View>\n            <Button onPress={onLoginPressed}>\n                Login\n            </Button>\n            <View style={styles.row}>\n                <Text>Don't have an account? </Text>\n                <TouchableOpacity\n                    onPress={() => navigation.replace('RegisterScreen')}\n                >\n                    <Text style={styles.link}>Register</Text>\n                </TouchableOpacity>\n            </View>\n        </View>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}