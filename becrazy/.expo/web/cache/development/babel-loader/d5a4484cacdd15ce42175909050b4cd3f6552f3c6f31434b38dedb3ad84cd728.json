{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport * as Font from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { useEffect, useState } from \"react\";\nexport default function useCachedResources() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoadingComplete = _useState2[0],\n    setLoadingComplete = _useState2[1];\n  useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _loadResourcesAndDataAsync.apply(this, arguments);\n    }\n    function _loadResourcesAndDataAsync() {\n      _loadResourcesAndDataAsync = _asyncToGenerator(function* () {\n        try {\n          yield SplashScreen.preventAutoHideAsync();\n          yield Font.loadAsync(_objectSpread(_objectSpread({}, FontAwesome.font), {}, {\n            \"space-mono\": require(\"../assets/fonts/SpaceMono-Regular.ttf\")\n          }));\n        } catch (e) {\n          console.warn(e);\n        } finally {\n          setLoadingComplete(true);\n          yield SplashScreen.hideAsync();\n        }\n      });\n      return _loadResourcesAndDataAsync.apply(this, arguments);\n    }\n    void loadResourcesAndDataAsync();\n  }, []);\n  return isLoadingComplete;\n}","map":{"version":3,"names":["FontAwesome","Font","SplashScreen","useEffect","useState","useCachedResources","_useState","_useState2","_slicedToArray","isLoadingComplete","setLoadingComplete","loadResourcesAndDataAsync","_loadResourcesAndDataAsync","apply","arguments","_asyncToGenerator","preventAutoHideAsync","loadAsync","_objectSpread","font","require","e","console","warn","hideAsync"],"sources":["/Users/mohammedkhedim/Gitclones/BeCrazy/becrazy/hooks/useCachedResources.ts"],"sourcesContent":["import { FontAwesome } from \"@expo/vector-icons\";\r\nimport * as Font from \"expo-font\";\r\nimport * as SplashScreen from \"expo-splash-screen\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function useCachedResources() {\r\n\tconst [isLoadingComplete, setLoadingComplete] = useState(false);\r\n\r\n\t// Load any resources or data that we need prior to rendering the app\r\n\tuseEffect(() => {\r\n\t\tasync function loadResourcesAndDataAsync() {\r\n\t\t\ttry {\r\n\t\t\t\tawait SplashScreen.preventAutoHideAsync();\r\n\r\n\t\t\t\t// Load fonts\r\n\t\t\t\tawait Font.loadAsync({\r\n\t\t\t\t\t...FontAwesome.font,\r\n\t\t\t\t\t\"space-mono\": require(\"../assets/fonts/SpaceMono-Regular.ttf\"),\r\n\t\t\t\t});\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// We might want to provide this error information to an error reporting service\r\n\t\t\t\tconsole.warn(e);\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoadingComplete(true);\r\n\t\t\t\tawait SplashScreen.hideAsync();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvoid loadResourcesAndDataAsync();\r\n\t}, []);\r\n\r\n\treturn isLoadingComplete;\r\n}\r\n"],"mappings":";;;;;AAAA,SAASA,WAAW,QAAQ,oBAAoB;AAChD,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,OAAO,KAAKC,YAAY,MAAM,oBAAoB;AAClD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,eAAe,SAASC,kBAAkBA,CAAA,EAAG;EAC5C,IAAAC,SAAA,GAAgDF,QAAQ,CAAC,KAAK,CAAC;IAAAG,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAxDG,iBAAiB,GAAAF,UAAA;IAAEG,kBAAkB,GAAAH,UAAA;EAG5CJ,SAAS,CAAC,YAAM;IAAA,SACAQ,yBAAyBA,CAAA;MAAA,OAAAC,0BAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IAAA,SAAAF,2BAAA;MAAAA,0BAAA,GAAAG,iBAAA,CAAxC,aAA2C;QAC1C,IAAI;UACH,MAAMb,YAAY,CAACc,oBAAoB,EAAE;UAGzC,MAAMf,IAAI,CAACgB,SAAS,CAAAC,aAAA,CAAAA,aAAA,KAChBlB,WAAW,CAACmB,IAAI;YACnB,YAAY,EAAEC,OAAO;UAAyC,GAC7D;QACH,CAAC,CAAC,OAAOC,CAAC,EAAE;UAEXC,OAAO,CAACC,IAAI,CAACF,CAAC,CAAC;QAChB,CAAC,SAAS;UACTX,kBAAkB,CAAC,IAAI,CAAC;UACxB,MAAMR,YAAY,CAACsB,SAAS,EAAE;QAC/B;MACD,CAAC;MAAA,OAAAZ,0BAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IAED,KAAKH,yBAAyB,EAAE;EACjC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOF,iBAAiB;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}