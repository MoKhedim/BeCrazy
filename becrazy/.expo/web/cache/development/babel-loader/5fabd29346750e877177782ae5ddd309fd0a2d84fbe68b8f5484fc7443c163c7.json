{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport { Media } from \"../components/Media\";\nimport { useContext, useEffect, useState } from 'react';\nimport { View } from \"../components/Themed\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport Colors from \"../constants/Colors\";\nimport { server } from \"../constants/Server\";\nimport { MyContext } from \"../App\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function FeedScreen(_ref) {\n  var navigation = _ref.navigation;\n  var colorScheme = useColorScheme();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    allMedias = _useState2[0],\n    setAllMedias = _useState2[1];\n  var _useContext = useContext(MyContext),\n    token = _useContext.token;\n  useEffect(function () {\n    function getAllMedias() {\n      return _getAllMedias.apply(this, arguments);\n    }\n    function _getAllMedias() {\n      _getAllMedias = _asyncToGenerator(function* () {\n        var urlAllMedias = server + \"/getAllMedia/\" + token;\n        var resultAllMedias = yield fetch(urlAllMedias, {\n          method: \"GET\",\n          headers: {\n            \"Access-Control-Allow-Origin\": \"*\"\n          }\n        });\n        if (resultAllMedias.ok) {\n          var data = yield resultAllMedias.json();\n          setAllMedias(data);\n          console.log(data);\n        } else {\n          console.log(\"une erreur s'est produite\");\n        }\n      });\n      return _getAllMedias.apply(this, arguments);\n    }\n    getAllMedias().then(function () {\n      return console.log('done getAllMedias');\n    });\n  }, []);\n  return _jsx(ScrollView, {\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'flex-end',\n          justifyContent: 'flex-end',\n          width: 350\n        },\n        children: _jsx(Pressable, {\n          onPress: function onPress() {\n            return alert('need to login to post!');\n          },\n          style: function style(_ref2) {\n            var pressed = _ref2.pressed;\n            return {\n              opacity: pressed ? 0.5 : 1\n            };\n          },\n          children: _jsx(MaterialIcons, {\n            name: \"post-add\",\n            size: 28,\n            color: Colors[colorScheme].text,\n            style: {\n              marginTop: 20\n            }\n          })\n        })\n      }), allMedias == null ? void 0 : allMedias.map(function (post) {\n        return _jsx(Media, {\n          allMedia: post\n        }, post._id);\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["useColorScheme","Media","useContext","useEffect","useState","View","MaterialIcons","Colors","server","MyContext","jsx","_jsx","jsxs","_jsxs","FeedScreen","_ref","navigation","colorScheme","_useState","_useState2","_slicedToArray","allMedias","setAllMedias","_useContext","token","getAllMedias","_getAllMedias","apply","arguments","_asyncToGenerator","urlAllMedias","resultAllMedias","fetch","method","headers","ok","data","json","console","log","then","ScrollView","children","style","styles","container","flexDirection","alignItems","justifyContent","width","Pressable","onPress","alert","_ref2","pressed","opacity","name","size","color","text","marginTop","map","post","allMedia","_id","StyleSheet","create","flex"],"sources":["/Users/mohammedkhedim/Gitclones/BeCrazy/becrazy/screens/FeedScreen.tsx"],"sourcesContent":["import { Pressable, StyleSheet } from 'react-native';\r\n\r\nimport { RootTabScreenProps } from '../types';\r\nimport { ScrollView } from 'react-native';\r\nimport useColorScheme from '../hooks/useColorScheme';\r\nimport { Media } from '../components/Media';\r\nimport { allMedia } from '../interfaces/media/allMedia';\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport { Text, View } from '../components/Themed';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\nimport Colors from '../constants/Colors';\r\nimport { server } from '../constants/Server';\r\nimport { MyContext } from '../App';\r\n\r\nexport default function FeedScreen({ navigation }: RootTabScreenProps<'Feed'>) {\r\n    const colorScheme = useColorScheme();\r\n    // array de AllMedias par les users\r\n    const [allMedias, setAllMedias] = useState<Array<allMedia>>([])\r\n    const { token } = useContext(MyContext);\r\n\r\n    // Get tous les medias à l'initialisation de la page\r\n    useEffect(() => {\r\n        async function getAllMedias() {\r\n            const urlAllMedias = `${server}/getAllMedia/${token}`;\r\n            const resultAllMedias = await fetch(urlAllMedias, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Access-Control-Allow-Origin\": \"*\"\r\n                }\r\n            });\r\n            if (resultAllMedias.ok) {\r\n                const data = await resultAllMedias.json();\r\n                setAllMedias(data);\r\n                console.log(data)\r\n            } else {\r\n                console.log(\"une erreur s'est produite\");\r\n            }\r\n        }\r\n        getAllMedias().then(() => console.log('done getAllMedias'));\r\n    }, []);\r\n\r\n    return (\r\n        <ScrollView>\r\n            <View style={styles.container}>\r\n                <View style={{ flexDirection: 'row', alignItems: 'flex-end', justifyContent: 'flex-end', width: 350 }}>\r\n                    <Pressable\r\n                        onPress={() => alert('need to login to post!')}\r\n                        style={({ pressed }) => ({\r\n                            opacity: pressed ? 0.5 : 1,\r\n                        })}>\r\n                        <MaterialIcons\r\n                            name=\"post-add\"\r\n                            size={28}\r\n                            color={Colors[colorScheme].text}\r\n                            style={{ marginTop: 20 }}\r\n                        />\r\n                    </Pressable>\r\n                </View>\r\n                {\r\n                    // afficher tous les médias postés\r\n                    allMedias?.map((post) => {\r\n                        return <Media\r\n                            key={post._id}\r\n                            allMedia={post} />\r\n                    })\r\n                }\r\n            </View>\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}