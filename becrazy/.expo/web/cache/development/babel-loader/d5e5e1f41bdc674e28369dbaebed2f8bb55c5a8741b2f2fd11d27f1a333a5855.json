{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport { Media } from \"../components/Media\";\nimport { View } from \"../components/Themed\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport Colors from \"../constants/Colors\";\nimport { server } from \"../constants/Server\";\nimport { MyContext } from \"../App\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function FeedScreen(_ref) {\n  var navigation = _ref.navigation;\n  var colorScheme = useColorScheme();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    allMedias = _useState2[0],\n    setAllMedias = _useState2[1];\n  var _useContext = useContext(MyContext),\n    token = _useContext.token;\n  useEffect(function () {\n    function getAllMedias() {\n      return _getAllMedias.apply(this, arguments);\n    }\n    function _getAllMedias() {\n      _getAllMedias = _asyncToGenerator(function* () {\n        var urlAllMedias = server + \"/getAllMedia/\" + token;\n        var resultAllMedias = yield fetch(urlAllMedias, {\n          method: \"GET\",\n          headers: {\n            \"Access-Control-Allow-Origin\": \"*\"\n          }\n        });\n        if (resultAllMedias.ok) {\n          var data = yield resultAllMedias.json();\n          setAllMedias(data);\n        }\n      });\n      return _getAllMedias.apply(this, arguments);\n    }\n    void getAllMedias();\n  }, []);\n  return _jsx(ScrollView, {\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(View, {\n        style: {\n          flexDirection: \"row\",\n          alignItems: \"flex-end\",\n          justifyContent: \"flex-end\",\n          width: 350\n        },\n        children: _jsx(Pressable, {\n          onPress: function onPress() {\n            return alert(\"need to login to post!\");\n          },\n          style: function style(_ref2) {\n            var pressed = _ref2.pressed;\n            return {\n              opacity: pressed ? 0.5 : 1\n            };\n          },\n          children: _jsx(MaterialIcons, {\n            name: \"post-add\",\n            size: 28,\n            color: Colors[colorScheme].text,\n            style: {\n              marginTop: 20\n            }\n          })\n        })\n      }), allMedias == null ? void 0 : allMedias.map(function (post) {\n        return _jsx(Media, {\n          allMedia: post\n        }, post._id);\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"names":["React","useContext","useEffect","useState","Pressable","StyleSheet","ScrollView","useColorScheme","Media","View","MaterialIcons","Colors","server","MyContext","jsx","_jsx","jsxs","_jsxs","FeedScreen","_ref","navigation","colorScheme","_useState","_useState2","_slicedToArray","allMedias","setAllMedias","_useContext","token","getAllMedias","_getAllMedias","apply","arguments","_asyncToGenerator","urlAllMedias","resultAllMedias","fetch","method","headers","ok","data","json","children","style","styles","container","flexDirection","alignItems","justifyContent","width","onPress","alert","_ref2","pressed","opacity","name","size","color","text","marginTop","map","post","allMedia","_id","create","flex"],"sources":["/Users/mohammedkhedim/Gitclones/BeCrazy/becrazy/screens/FeedScreen.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Pressable, StyleSheet } from \"react-native\";\r\nimport { RootTabScreenProps } from \"../types\";\r\nimport { ScrollView } from \"react-native\";\r\nimport useColorScheme from \"../hooks/useColorScheme\";\r\nimport { Media } from \"../components/Media\";\r\nimport { allMedia } from \"../interfaces/media/allMedia\";\r\nimport { View } from \"../components/Themed\";\r\nimport { MaterialIcons } from \"@expo/vector-icons\";\r\nimport Colors from \"../constants/Colors\";\r\nimport { server } from \"../constants/Server\";\r\nimport { MyContext } from \"../App\";\r\n\r\nexport default function FeedScreen({ navigation }: RootTabScreenProps<\"Feed\">) {\r\n\tconst colorScheme = useColorScheme();\r\n\t// array de AllMedias par les users\r\n\tconst [allMedias, setAllMedias] = useState<Array<allMedia>>([]);\r\n\tconst { token } = useContext(MyContext);\r\n\r\n\t// Get tous les medias à l'initialisation de la page\r\n\tuseEffect(() => {\r\n\t\tasync function getAllMedias() {\r\n\t\t\tconst urlAllMedias = `${server}/getAllMedia/${token}`;\r\n\t\t\tconst resultAllMedias = await fetch(urlAllMedias, {\r\n\t\t\t\tmethod: \"GET\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\"\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif (resultAllMedias.ok) {\r\n\t\t\t\tconst data = await resultAllMedias.json();\r\n\t\t\t\tsetAllMedias(data);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\tvoid getAllMedias();\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<ScrollView>\r\n\t\t\t<View style={styles.container}>\r\n\t\t\t\t<View style={{ flexDirection: \"row\", alignItems: \"flex-end\", justifyContent: \"flex-end\", width: 350 }}>\r\n\t\t\t\t\t<Pressable\r\n\t\t\t\t\t\tonPress={() => alert(\"need to login to post!\")}\r\n\t\t\t\t\t\tstyle={({ pressed }) => ({\r\n\t\t\t\t\t\t\topacity: pressed ? 0.5 : 1,\r\n\t\t\t\t\t\t})}>\r\n\t\t\t\t\t\t<MaterialIcons\r\n\t\t\t\t\t\t\tname=\"post-add\"\r\n\t\t\t\t\t\t\tsize={28}\r\n\t\t\t\t\t\t\tcolor={Colors[colorScheme].text}\r\n\t\t\t\t\t\t\tstyle={{ marginTop: 20 }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Pressable>\r\n\t\t\t\t</View>\r\n\t\t\t\t{\r\n\t\t\t\t\t// afficher tous les médias postés\r\n\t\t\t\t\tallMedias?.map((post) => {\r\n\t\t\t\t\t\treturn <Media\r\n\t\t\t\t\t\t\tkey={post._id}\r\n\t\t\t\t\t\t\tallMedia={post} />;\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</View>\r\n\t\t</ScrollView>\r\n\t);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tflex: 1,\r\n\t\talignItems: \"center\",\r\n\t\tjustifyContent: \"center\",\r\n\t},\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}