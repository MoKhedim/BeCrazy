{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { Text } from \"../../components/Themed\";\nimport { Button } from \"../../components/auth/Button\";\nimport { TextInput } from \"../../components/auth/TextInput\";\nimport Logo from \"../../components/Logo\";\nimport { emailValidator } from \"../../helpers/emailValidator\";\nimport styles from \"../../components/auth/StyleSheetForm\";\nimport { server } from \"../../constants/Server\";\nimport { ChangePasswordModal } from \"../../components/auth/ChangePasswordModal\";\nimport { passwordValidator } from \"../../helpers/passwordValidator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ResetPasswordScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState({\n      value: \"\",\n      error: \"\"\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    modalVisible = _useState4[0],\n    setModalVisible = _useState4[1];\n  var _useState5 = useState({\n      value: \"\",\n      error: \"\"\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    newPassword = _useState6[0],\n    setNewPassword = _useState6[1];\n  var _useState7 = useState(\"\"),\n    _useState8 = _slicedToArray(_useState7, 2),\n    code = _useState8[0],\n    setCode = _useState8[1];\n  var onResetPressed = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var emailError = emailValidator(email.value);\n      if (emailError) {\n        setEmail(_objectSpread(_objectSpread({}, email), {}, {\n          error: emailError\n        }));\n        return;\n      }\n      var res = yield fetch(server + \"/forgotpassword\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: email.value\n        })\n      });\n      var data = yield res.json();\n      if (res.status === 200) {\n        setModalVisible(true);\n      } else {\n        alert(data.message);\n      }\n    });\n    return function onResetPressed() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var modifyPassword = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      var passwordError = passwordValidator(newPassword.value);\n      if (passwordError) {\n        setNewPassword(_objectSpread(_objectSpread({}, newPassword), {}, {\n          error: passwordError\n        }));\n        return;\n      }\n      var res = yield fetch(server + \"/verifCode/\" + email.value, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          code: code,\n          newpassword: newPassword.value\n        })\n      });\n      var data = yield res.json();\n      if (res.status === 200) {\n        setModalVisible(false);\n        navigation.replace(\"LoginScreen\");\n      } else {\n        alert(data.message);\n      }\n    });\n    return function modifyPassword() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: Keyboard.dismiss,\n    accessible: false,\n    children: _jsxs(KeyboardAvoidingView, {\n      style: styles.container,\n      behavior: \"padding\",\n      children: [_jsx(ChangePasswordModal, {\n        visible: modalVisible,\n        onPress: function onPress() {\n          return modifyPassword();\n        },\n        error: newPassword.error,\n        password: newPassword.value,\n        onChangePassword: function onChangePassword(text) {\n          return setNewPassword({\n            value: text,\n            error: \"\"\n          });\n        },\n        code: code,\n        onChangeCode: function onChangeCode(text) {\n          return setCode(text);\n        },\n        onClose: function onClose() {\n          return setModalVisible(false);\n        }\n      }), _jsx(Logo, {}), _jsx(Text, {\n        style: styles.title,\n        children: \"Reset Password\"\n      }), _jsx(TextInput, {\n        returnKeyType: \"done\",\n        placeholder: \"Email\",\n        value: email.value,\n        onChangeText: function onChangeText(text) {\n          return setEmail({\n            value: text,\n            error: \"\"\n          });\n        },\n        autoCapitalize: \"none\",\n        textContentType: \"emailAddress\",\n        keyboardType: \"email-address\"\n      }), _jsx(Text, {\n        style: styles.error,\n        children: email.error\n      }), _jsx(View, {\n        style: styles.forgotPassword,\n        children: _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return setModalVisible(true);\n          },\n          children: _jsx(Text, {\n            style: styles.forgot,\n            children: \"Show modal\"\n          })\n        })\n      }), _jsx(Button, {\n        onPress: onResetPressed,\n        children: \"Reset Password\"\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","useState","View","TouchableOpacity","TouchableWithoutFeedback","KeyboardAvoidingView","Keyboard","Text","Button","TextInput","Logo","emailValidator","styles","server","ChangePasswordModal","passwordValidator","jsx","_jsx","jsxs","_jsxs","ResetPasswordScreen","_ref","navigation","_useState","value","error","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","modalVisible","setModalVisible","_useState5","_useState6","newPassword","setNewPassword","_useState7","_useState8","code","setCode","onResetPressed","_ref2","_asyncToGenerator","emailError","_objectSpread","res","fetch","method","headers","body","JSON","stringify","data","json","status","alert","message","apply","arguments","modifyPassword","_ref3","passwordError","newpassword","replace","onPress","dismiss","accessible","children","style","container","behavior","visible","password","onChangePassword","text","onChangeCode","onClose","title","returnKeyType","placeholder","onChangeText","autoCapitalize","textContentType","keyboardType","forgotPassword","forgot"],"sources":["/Users/mohammedkhedim/Gitclones/BeCrazy/becrazy/screens/auth/ResetPassword.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, TouchableOpacity, TouchableWithoutFeedback, KeyboardAvoidingView, Keyboard } from \"react-native\";\r\nimport { Text } from \"../../components/Themed\";\r\nimport { Button } from \"../../components/auth/Button\";\r\nimport { TextInput } from \"../../components/auth/TextInput\";\r\nimport Logo from \"../../components/Logo\";\r\nimport { emailValidator } from \"../../helpers/emailValidator\";\r\nimport { RootStackScreenProps } from \"../../types\";\r\nimport styles from \"../../components/auth/StyleSheetForm\";\r\nimport { server } from \"../../constants/Server\";\r\nimport { ChangePasswordModal } from \"../../components/auth/ChangePasswordModal\";\r\nimport { passwordValidator } from \"../../helpers/passwordValidator\";\r\n\r\nexport default function ResetPasswordScreen({ navigation }: RootStackScreenProps<\"ResetPasswordScreen\">) {\r\n\tconst [email, setEmail] = useState({ value: \"\", error: \"\" });\r\n\tconst [modalVisible, setModalVisible] = useState(false);\r\n\r\n\t// the state for when the user wants to change his password\r\n\tconst [newPassword, setNewPassword] = useState({ value: \"\", error: \"\" });\r\n\tconst [code, setCode] = useState(\"\");\r\n\r\n\t// if the email is valid, send the reset password request\r\n\tconst onResetPressed = async () => {\r\n\t\tconst emailError = emailValidator(email.value);\r\n\t\tif (emailError) {\r\n\t\t\tsetEmail({ ...email, error: emailError });\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst res = await fetch(`${server}/forgotpassword`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\temail: email.value\r\n\t\t\t})\r\n\t\t});\r\n\t\tconst data = await res.json();\r\n\t\tif (res.status === 200) {\r\n\t\t\tsetModalVisible(true);\r\n\t\t} else {\r\n\t\t\talert(data.message);\r\n\t\t}\r\n\t};\r\n\r\n\t// if the new password is valid and the code too, send the reset password request\r\n\t// and close the modal\r\n\t// only shows after the user has requested a reset password\r\n\tconst modifyPassword = async () => {\r\n\t\tconst passwordError = passwordValidator(newPassword.value);\r\n\t\tif (passwordError) {\r\n\t\t\tsetNewPassword({ ...newPassword, error: passwordError });\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst res = await fetch(`${server}/verifCode/${email.value}`, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tcode: code,\r\n\t\t\t\tnewpassword: newPassword.value\r\n\t\t\t})\r\n\t\t});\r\n\t\tconst data = await res.json();\r\n\t\tif (res.status === 200) {\r\n\t\t\tsetModalVisible(false);\r\n\t\t\tnavigation.replace(\"LoginScreen\");\r\n\t\t} else {\r\n\t\t\talert(data.message);\r\n\t\t}\r\n\t};\r\n\r\n\r\n\treturn (\r\n\t\t<TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}>\r\n\t\t\t<KeyboardAvoidingView style={styles.container} behavior=\"padding\">\r\n\t\t\t\t<ChangePasswordModal\r\n\t\t\t\t\tvisible={modalVisible}\r\n\t\t\t\t\tonPress={() => modifyPassword()}\r\n\t\t\t\t\terror={newPassword.error}\r\n\t\t\t\t\tpassword={newPassword.value}\r\n\t\t\t\t\tonChangePassword={(text: string) => setNewPassword({ value: text, error: \"\" })}\r\n\t\t\t\t\tcode={code}\r\n\t\t\t\t\tonChangeCode={(text: string) => setCode(text)}\r\n\t\t\t\t\tonClose={() => setModalVisible(false)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Logo />\r\n\t\t\t\t<Text style={styles.title}>Reset Password</Text>\r\n\t\t\t\t<TextInput\r\n\t\t\t\t\treturnKeyType=\"done\"\r\n\t\t\t\t\tplaceholder='Email'\r\n\t\t\t\t\tvalue={email.value}\r\n\t\t\t\t\tonChangeText={(text: string) => setEmail({ value: text, error: \"\" })}\r\n\t\t\t\t\tautoCapitalize=\"none\"\r\n\t\t\t\t\ttextContentType=\"emailAddress\"\r\n\t\t\t\t\tkeyboardType=\"email-address\"\r\n\t\t\t\t/>\r\n\t\t\t\t<Text style={styles.error}>{email.error}</Text>\r\n\t\t\t\t<View style={styles.forgotPassword}>\r\n\t\t\t\t\t<TouchableOpacity\r\n\t\t\t\t\t\tonPress={() => setModalVisible(true)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Text style={styles.forgot}>Show modal</Text>\r\n\t\t\t\t\t</TouchableOpacity>\r\n\t\t\t\t</View>\r\n\t\t\t\t<Button onPress={onResetPressed}>\r\n                    Reset Password\r\n\t\t\t\t</Button>\r\n\t\t\t</KeyboardAvoidingView>\r\n\t\t</TouchableWithoutFeedback>\r\n\t);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}